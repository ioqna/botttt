import discord
from discord.ext import commands
from discord import app_commands
from datetime import timedelta

# Replace with your bot token
TOKEN = 'MTM1MDMxNDk4NjE4MjAyMTIyMQ.GSR_0U.VRcjoi1ZGB3_kDj58ESL0pKuSa50qoT6vQoTUU'

# Define intents
intents = discord.Intents.default()
intents.messages = True
intents.guilds = True
intents.members = True

# Initialize bot
bot = commands.Bot(command_prefix="/", intents=intents)


@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')
    try:
        synced = await bot.tree.sync()
        print(f'Slash commands synced: {len(synced)}')
    except Exception as e:
        print(f'Failed to sync commands: {e}')


class PaymentDropdown(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(label="CashApp", description="Send payment via CashApp", value="cashapp"),
            discord.SelectOption(label="PayPal", description="Send payment via PayPal", value="paypal"),
            discord.SelectOption(label="Card", description="Pay with a card", value="card"),
            discord.SelectOption(label="Crypto", description="Pay using cryptocurrency", value="crypto")
        ]
        super().__init__(placeholder="Select a payment method...", options=options)

    async def callback(self, interaction: discord.Interaction):
        if self.values[0] == "cashapp":
            await interaction.response.send_message("CashApp: https://cash.app/$83khv", ephemeral=True)
        elif self.values[0] == "paypal":
            await interaction.response.send_message("PayPal: https://www.paypal.me/ioqnaa", ephemeral=True)
        elif self.values[0] == "card":
            await interaction.response.send_message("Card: https://precision.sellhub.cx", ephemeral=True)
        elif self.values[0] == "crypto":
            await interaction.response.send_message(view=CryptoDropdownView(), ephemeral=True)


class CryptoDropdown(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(label="Bitcoin", value="btc"),
            discord.SelectOption(label="Litecoin", value="ltc"),
            discord.SelectOption(label="Ethereum", value="eth")
        ]
        super().__init__(placeholder="Select a cryptocurrency...", options=options)

    async def callback(self, interaction: discord.Interaction):
        if self.values[0] == "btc":
            await interaction.response.send_message("Bitcoin: bc1q20ge37gm89x4ghl4nxx5qqg32jvljtakpcmq25", ephemeral=True)
        elif self.values[0] == "ltc":
            await interaction.response.send_message("Litecoin: ltc1qzu2f7zf2lakt75cgsulzl0xyd678ru64wg3sp6", ephemeral=True)
        elif self.values[0] == "eth":
            await interaction.response.send_message("Ethereum: 0xF4B198E366Ad633DDD2614197339aDc291955E61", ephemeral=True)


class PaymentView(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(PaymentDropdown())


class CryptoDropdownView(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(CryptoDropdown())


@bot.tree.command(name="payment")
async def payment(interaction: discord.Interaction):
    """Choose a payment method"""
    await interaction.response.send_message(view=PaymentView(), ephemeral=True)


@bot.tree.command(name="dm")
@app_commands.describe(user="User to DM", message="Message to send")
async def dm(interaction: discord.Interaction, user: discord.User, message: str):
    try:
        await user.send(message)
        await interaction.response.send_message(f'Message sent to {user.name}', ephemeral=True)
    except discord.Forbidden:
        await interaction.response.send_message("I can't DM this user.", ephemeral=True)


@bot.tree.command(name="dm_file")
@app_commands.describe(user="User to DM", file="File to send")
async def dm_file(interaction: discord.Interaction, user: discord.User, file: discord.Attachment):
    try:
        await user.send(file=await file.to_file())
        await interaction.response.send_message(f'File sent to {user.name}', ephemeral=True)
    except discord.Forbidden:
        await interaction.response.send_message("I can't DM this user.", ephemeral=True)


@bot.tree.command(name="ban")
@app_commands.describe(user="User to ban", reason="Reason for banning")
async def ban(interaction: discord.Interaction, user: discord.Member, reason: str = "No reason provided"):
    await user.ban(reason=reason)
    await interaction.response.send_message(f'{user.name} has been banned for: {reason}', ephemeral=True)


@bot.tree.command(name="kick")
@app_commands.describe(user="User to kick", reason="Reason for kicking")
async def kick(interaction: discord.Interaction, user: discord.Member, reason: str = "No reason provided"):
    await user.kick(reason=reason)
    await interaction.response.send_message(f'{user.name} has been kicked for: {reason}', ephemeral=True)


@bot.tree.command(name="timeout")
@app_commands.describe(user="User to timeout", duration="Duration in minutes", reason="Reason for timeout")
async def timeout(interaction: discord.Interaction, user: discord.Member, duration: int, reason: str = "No reason provided"):
    await user.timeout(timedelta(minutes=duration), reason=reason)
    await interaction.response.send_message(f'{user.name} has been timed out for {duration} minutes. Reason: {reason}', ephemeral=True)


@bot.tree.command(name="add_role")
@app_commands.describe(user="User to add role to", role="Role to add")
async def add_role(interaction: discord.Interaction, user: discord.Member, role: discord.Role):
    await user.add_roles(role)
    await interaction.response.send_message(f'Role {role.name} has been added to {user.name}', ephemeral=True)


# Run the bot
bot.run(TOKEN)

